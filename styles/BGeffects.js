document.addEventListener("DOMContentLoaded",function(){const t=new class{constructor(){this.config={baseDensity:35,maxParticles:150,particleSpeed:.4,lineMaxDistance:120,lineOpacity:.4,mouseRadius:180,maxConnections:4,mobileFactor:1.8},this.canvas=document.getElementById("particleCanvas"),this.ctx=this.canvas.getContext("2d"),this.particles=[],this.mouse={x:null,y:null},this.animationFrame=null,this.init()}init(){this.resizeCanvas(),this.createParticles(),this.bindEvents(),this.animate()}bindEvents(){window.addEventListener("resize",()=>this.resizeCanvas()),window.addEventListener("mousemove",t=>{this.mouse.x=t.clientX,this.mouse.y=t.clientY}),window.addEventListener("mouseout",()=>{this.mouse.x=null,this.mouse.y=null})}resizeCanvas(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.createParticles(!0)}createParticles(t=!1){t&&(this.particles=[]);let i=Math.floor(window.innerWidth/this.config.baseDensity);i=Math.min(i,this.config.maxParticles),window.innerWidth<768&&(i=Math.floor(i/this.config.mobileFactor));const s=["#4CAF50","#2196F3","#E91E63","#FFC107"];for(let t=0;t<i;t++)this.particles.push({x:Math.random()*this.canvas.width,y:Math.random()*this.canvas.height,vx:(Math.random()-.5)*this.config.particleSpeed,vy:(Math.random()-.5)*this.config.particleSpeed,radius:1.5*Math.random()+1,color:s[Math.floor(Math.random()*s.length)]})}drawParticle(t){this.ctx.beginPath(),this.ctx.arc(t.x,t.y,t.radius,0,2*Math.PI),this.ctx.fillStyle=t.color,this.ctx.fill()}updateParticle(t){if((t.x<0||t.x>this.canvas.width)&&(t.vx*=-1),(t.y<0||t.y>this.canvas.height)&&(t.vy*=-1),this.mouse.x&&this.mouse.y){const i=t.x-this.mouse.x,s=t.y-this.mouse.y,e=Math.sqrt(i*i+s*s);if(e<this.config.mouseRadius){const n=(this.config.mouseRadius-e)/this.config.mouseRadius;t.x-=i*n*.01,t.y-=s*n*.01}}t.x+=t.vx,t.y+=t.vy}drawConnection(t,i,s){const e="dark"===document.documentElement.getAttribute("data-theme")?"255,255,255":"0,0,0",n=(1-s/this.config.lineMaxDistance)*this.config.lineOpacity;this.ctx.beginPath(),this.ctx.strokeStyle=`rgba(${e},${n})`,this.ctx.lineWidth=1,this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(i.x,i.y),this.ctx.stroke()}animate(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const t=new Map;this.particles.forEach(i=>t.set(i,0)),this.particles.forEach((i,s)=>{const e=[];for(let t=s+1;t<this.particles.length;t++){const s=this.particles[t],n=i.x-s.x,a=i.y-s.y,h=Math.sqrt(n*n+a*a);h<this.config.lineMaxDistance&&e.push({other:s,distance:h})}e.sort((t,i)=>t.distance-i.distance).slice(0,this.config.maxConnections).forEach(({other:s,distance:e})=>{t.get(i)<this.config.maxConnections&&t.get(s)<this.config.maxConnections&&(this.drawConnection(i,s,e),t.set(i,t.get(i)+1),t.set(s,t.get(s)+1))})}),this.particles.forEach(t=>{this.updateParticle(t),this.drawParticle(t)}),this.mouse.x&&this.mouse.y&&this.particles.forEach(i=>{const s=i.x-this.mouse.x,e=i.y-this.mouse.y,n=Math.sqrt(s*s+e*e);n<150&&t.get(i)<this.config.maxConnections&&this.drawConnection(i,{x:this.mouse.x,y:this.mouse.y},n)}),this.animationFrame=requestAnimationFrame(()=>this.animate())}};window.particleBackground=t});